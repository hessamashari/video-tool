#!/bin/bash

	# v0.1 --(20180815) add reduce_video_size function
	# v0.2 --(20180816) add convert_video_format function

####################################################
#                 Video_Tool V0.2                  #
#  https://github.com/hessamashari/video-tool.git  #
####################################################


normal="$(printf '\033[0m')"          # text mode
# Colors
red="$(printf '\033[0;31m')"  		  # red
green="$(printf '\033[0;32m')"        # green
orange="$(printf '\033[0;33m')"       # orange
blue="$(printf '\033[0;34m')"         # blue
white="$(printf '\033[0;37m')"        # white

# ----------\Find video function\----------
function find_video() {
	clear

	local inputDir="$1"
	local IFS=":" # Use in line 35/36

	read -p "Please enter the name of video : " videoName

	# Separating files that have video format
	local videoTypes="\.webm$|\.flv$|\.vob$|\.ogg$|\.ogv$|\.drc$|\.gifv$|\.mng$|\.avi$|\.mov$|\.qt$|\.wmv$|\.yuv$|\.rm$|\.rmvb$|/.asf$|\.amv$|\.mp4$|\.m4v$|\.mp*$|\.m?v$|\.svi$|\.3gp$|\.ts$|\.flv$|\.f4v$"

	if [[ "$inputDir" == "/" ]]; then
		sudo find / -type f -iname "*$videoName*" | grep -E "$videoTypes"
		local searchDir=$(sudo find / -type f -iname "*$videoName*" | grep -E "$videoTypes")
	else
		find "$inputDir" -type f -iname "*$videoName*" | grep -E "$videoTypes"
		local searchDir=$(find "$inputDir" -type f -iname "*$videoName*" | grep -E "$videoTypes")
	fi

		# Creat file with found videos and change \n to : on it
		echo $searchDir > $HOME/searchDir
		sed -i ':a;N;$!ba;s/\n/:/g' $HOME/searchDir

	# Ask for all videos were found
	for videoPath in $(cat $HOME/searchDir); do
		echo -e "\n"
		read -p "${green} Would you like to work with ${orange}'$videoPath'${normal}? [Y/n] "  workWithThis

		if [[ "$workWithThis" == "" || "$workWithThis" == "y" || "$workWithThis" == "Y" ]]; then
			refer_related_func "$videoPath"
		elif [[ "$workWithThis" == "n" || "$workWithThis" == "N" ]]; then
			continue
		else
			echo -e "${red}Invalid argument!${normal}"
			continue
		fi
	done

	# Remove searchDir file
	rm -rf $HOME/searchDir
}

# ----------\Select movie function\----------
function select_video_path() {
	# Ask for video path
	read -p "${green}Do you want to search video for you ${orange}{search / s}${green} or you know the video location ${orange}{location / l}${normal} : " searchVideoAnswer
	clear

	echo -e "ُ${red}+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+${normal}"

	if [[ "$searchVideoAnswer" == "search" || "$searchVideoAnswer" == "S" || "$searchVideoAnswer" == "s" ]]; then
		read -p "Do you like to serach all of your system (Requires root access)? [Y/n] " searchAllSystem

		if [[ "$searchAllSystem" == "" || "$searchAllSystem" == "y" || "$searchAllSystem" == "Y" ]]; then
			# Search all of file system
		    echo -e "This operation may take a while!"

			find_video "/"
		elif [[ "$searchAllSystem" == "n" || "$searchAllSystem" == "N" ]]; then
			read -p "Do you like search this directory? [Y/n] " workingDirectory

			if [[ "$workingDirectory" == "" || "$workingDirectory" == "y" || "$workingDirectory" == "Y" ]]; then
				# Search current directory

				find_video "$PWD"
			elif [[ "$workingDirectory" == "n" || "$workingDirectory" == "N" ]]; then
				# Search entered path
				read -p "Enter a directory : " -i "" -e userEnteredPath
					if [[ "$userEnteredPath" == "/" ]]; then
						echo -e "${red}You have to chose first option :)${normal}"
					else
						find_video "$userEnteredPath"
					fi
			else
				echo -e "${red}Invalid argument!${normal}"
				exit 1
			fi
		else
		    echo -e "${red}Invalid argument!${normal}"
			exit 1
		fi
	elif [[ "$searchVideoAnswer" == "location" || "$searchVideoAnswer" == "L" || "$searchVideoAnswer" == "l" ]]; then
		# Read path/to/video
		read -p "Enter path of the video : " -i "" -e videoPath

		refer_related_func "$videoPath"
	else
		echo -e "${red}Invalid argument!${normal}"
		exit 1
	fi
}

# ----------\Reduce video size function\----------
function reduce_video_size() {
	clear

	local inputVideo="$1"

	# Check access to video
	if [[ -r "$inputVideo" ]]; then
		read -p "Do you want to rename the new video? [Y/n] " renameNewVideo

		if [[ "$renameNewVideo" == "" || "$renameNewVideo" == "Y" || "$renameNewVideo" == "y" ]]; then
			read -p "Please write the new name : " newVideoName

			ffmpeg -i "$inputVideo" -vcodec h264 -acodec aac -strict -2 "$newVideoName.mp4"

			if [[ "$?" == "0" ]]; then
				echo -e "\n"
				echo -e "${green}Your video is ready : ${orange}$newVideoName${normal}"
			else
				echo -e "\n"
				echo -e "${red}Proccess doesn't finish succesfully!${normal}"
				exit 1
			fi
		elif [[ "$renameNewVideo" == "n" || "$renameNewVideo" == "N" ]]; then

			ffmpeg -i "$inputVideo" -vcodec h264 -acodec aac -strict -2 "$(echo "$inputVideo" | tr '.' ' ').mp4"

			# Check operation
			if [[ "$?" == "0" ]]; then
				echo -e "\n"
				echo -e "${green}Your video is ready : ${orange}$(echo "$inputVideo" | tr '.' ' ').mp4${normal}"
			else
				echo -e "\n"
				echo -e "${red}Proccess doesn't finish succesfully!${normal}"
				exit 1
			fi
		else
			echo -e "${red}Invalid argument!${normal}"
			exit 1
		fi
	else
		echo -e "\n"
		echo -e "${red}You haven't access to ${orange}'$inputVideo'${normal}"
		exit 1
	fi
}

# ----------\Change video format function\----------
function convert_video_format() {
	clear

	local inputVideo="$1"
	local videoFormts=("mkv" "mp4" "mp3" "mov" "ogg" "wmv" "webm" "vob" "avi" "flv" "3gp" "ogv" "m4v" "mng" "fv4" "svi" "amv") # Use for using fewer if in line 182:190

	# Check access to video
	if [[ -r "$inputVideo" ]]; then
		echo -e "ُ${red}+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+${normal}"
		read -p "${green}What format do you want to convert ?${normal}
		1)${orange} mkv${normal}
		2)${orange} mp4${normal}
		3)${orange} mp3${normal}
		4)${orange} mov${normal}
		5)${orange} ogg${normal}
		6)${orange} wmv${normal}
		7)${orange} webm${normal}
		8)${orange} vob${normal}
		9)${orange} avi${normal}
		10)${orange} flv${normal}
		11)${orange} 3gp${normal}
		12)${orange} ogv${normal}
		13)${orange} m4v${normal}
		14)${orange} mng${normal}
		15)${orange} fv4${normal}
		16)${orange} svi${normal}
		17)${orange} amv${normal}

		Enter the number of the option that you selected : " newVideoFormat
		echo -e "ُ${red}+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+${normal}"

		if [[ "$newVideoFormat" -gt "-1" && "$newVideoFormat" -lt $((${#videoFormts[@]}+1)) ]]; then
			echo -e "${green}This operation may take a while because I do not like to put down the quality of your video!${normal}"
			echo -e "\n"
			sleep 2

			# Change format
			ffmpeg -i "$inputVideo" -c:v libx264 "$(echo "$inputVideo" | tr '.' ' ')".${videoFormts[$(("$newVideoFormat"-1))]}

		else
			echo -e "${red}Your selected number doesn't match with my options!${normal}"
			exit 1
		fi

		# Check operation
		if [[ "$?" == "0" ]]; then
			echo -e "\n"
			echo -e "${green}Your video is ready : ${orange}$(echo "$inputVideo" | tr '.' ' ')".${videoFormts[$(("$newVideoFormat"-1))]}${normal}"
		else
			echo -e "\n"
			echo -e "${red}Proccess doesn't finish succesfully!${normal}"
			exit 1
		fi
	else
		echo -e "\n"
		echo -e "${red}You haven't access to ${orange}'$inputVideo'${normal}"
		exit 1
	fi
}

# ----------\Refer to related function\----------
function refer_related_func() {
	local pathToVideo="$1"

	if [[ "$selectedItem" == "1" ]]; then
		reduce_video_size "$pathToVideo"
	elif [[ "$selectedItem" == "2" ]]; then
		convert_video_format "$pathToVideo"
	fi
}

# ----------\Main function\----------
function main() {
	clear

	echo -e "ُ${red}+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+${normal}"
	read -p "${green}What can I do for you ???${normal}
	1)${orange} Reduce video size.${normal}
	2)${orange} Convert the video format.${normal}

	Enter the number of the option that you selected : " selectedItem
	echo -e "ُ${red}+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+${normal}"
	if [[ "$selectedItem" -gt "0" && "$selectedItem" -lt "3" ]]; then
		select_video_path
	else
		echo -e "${red}Invalid argument!${normal}"
		exit 1
	fi
}

# ----------\Help function\----------
function usage() {
	echo "\n"
	echo -e "\n Usage: video-tool [ -h | --help ],  [ --uninstall ],   [ -U | --update ]"
	return
}

# ----------\Input options\----------
case "$1" in
    "")    main    ;;
    "--update" | "-U")    update    ;;
	"--uninstall")    uninstall    ;;
	"--help" | "-h")    usage    ;;
	*)    usage    ;;
esac;
exit 0
